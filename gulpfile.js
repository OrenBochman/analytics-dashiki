/*jslint node: true, stupid: true */
// Node modules
var args    = require('yargs').argv,
    chalk   = require('chalk'),
    merge   = require('deeply'),
    del     = require('del'),
    es      = require('event-stream'),
    fs      = require('fs'),
    vm      = require('vm'),
    gitRev  = require('git-rev-sync'),
    $       = require('cheerio');

// Gulp and plugins
var gulp        = require('gulp'),
    gutil       = require('gulp-util'),
    rjs         = require('gulp-requirejs-bundler'),
    uglify      = require('gulp-uglify'),
    concat      = require('gulp-concat'),
    minifyCSS   = require('gulp-minify-css'),
    htmlreplace = require('gulp-html-replace'),
    rev         = require('gulp-rev'),
    jshint      = require('gulp-jshint'),
    rename      = require('gulp-rename'),
    replace     = require('gulp-replace');

// configuration defaults
var defaults = {

    layoutsRoot     : './src/layouts/',
    wiki            : 'meta.wikimedia.org',
    namespace       : 'Config:', // NOTE: set this up on meta
    buildConfigPath : './src/config-from-build.js',
    outputPath      : 'dist/',
    requireConfig   : './src/app/require.config',
    optimizerConfig : {
        out             : 'scripts.js',
        baseUrl         : './src',
        name            : 'app/startup',
        insertRequire   : ['app/startup'],
        paths           : {
            requireLib  : 'bower_modules/requirejs/require'
        },
    }
};

/* Helper Functions */
function getStylesheets(html) {
    return $.load(html)('head .minify link[rel="stylesheet"]').map(function() {
        // convert paths like '/src/css/style.css' into './src/css/style.css'
        return '.' + $(this).attr('href');
    }).get();
}

function loadLayout (layout, config) {
    try {
        var path = defaults.layoutsRoot + layout + '/';
        var styles = getStylesheets(fs.readFileSync(path + 'index.html', 'utf8'));
        var layoutObject = require(path);

        layoutObject.rootPath = path;
        layoutObject.destPath = defaults.outputPath + layout + '-' + config + '/';
        // the alphabetic order of css files should be the order you want them
        // to be concatenated, since order matters in CSS
        layoutObject.cssSources = styles.concat(path + '*.css');
        // lint everything because it's easier, may prove annoying with many layouts
        layoutObject.lintSources = [
            './src/app/*.js', './src/components/*/*.js', './src/lib/*.js', path + '*.js'
        ];
        return layoutObject;
    } catch(e) {
        gutil.log(
            '[ERROR] Layout ' + chalk.white(layout) +
            ' invalid or not found in ' + chalk.white(defaults.layoutsRoot)
        );
        gutil.log('[ERROR] ' + e);
        gutil.log(
            '[ERROR] Layouts are: '
            + chalk.white(fs.readdirSync(defaults.layoutsRoot).join(', '))
            + ' .  Make sure your layout respects conventions.'
        );
        process.exit(1);
    }
}

function wrapWithDefine (returnValue) {
    return "// *** Autogenerated, change at your own risk\n" +
           "define(function(){ 'use strict'; return "+returnValue+"; });";
}

/* write a configuration object that the config api can prioritize
 */
function writeBuildConfig (config) {
    var wrappedConfig = wrapWithDefine(
        config ?
            JSON.stringify({
                endpoint: defaults.wiki,
                dashboardArticle: defaults.namespace + config,
            }) :
            null
    );
    fs.writeFileSync(defaults.buildConfigPath, wrappedConfig);
}
/* End Helper Functions */


/* Parse Arguments and set Defaults */
if (!args.layout || !args.config) {
    gutil.log('[ERROR] you need --layout and --config parameters to build');
    process.exit(1);
}

writeBuildConfig(args.config);
var layout = loadLayout(args.layout, args.config);
layout.version = gitRev.short();

gutil.log(
    'Building ' + chalk.white(args.layout) +
    ' configured with ' + chalk.white(args.config) + ' ...'
);

layout.requireJsOptimizerConfig = merge(
    require(defaults.requireConfig),
    defaults.optimizerConfig,
    layout.optimizerConfig
);
/* End Parse Arguments */


/* Gulp Tasks (all tasks are layout-specific, based on the arguments parsed above) */
gulp.task('default', ['html'], function () {
    gutil.log('');
});

gulp.task('html', ['js', 'css', 'fonts'], function () {
    // restore the build config to return nothing so it doesn't break
    // automated or local testing
    writeBuildConfig(null);

    return gulp.src(layout.rootPath + 'index.html')
        .pipe(htmlreplace({

        // convert the config wiki article name to a title by splitting any CamelCase
        'title': '<title>'+ args.config.replace(/([^ ])([A-Z0-9])/g, '$1 $2') +'</title>',
        // version the styles and scripts to flush old logic from client caches
        'css': '<link rel="stylesheet" href="styles.css?v=' + layout.version + '">',
        'js': '<script src="scripts.js?v=' + layout.version + '"></script>',

        }))
        .pipe(gulp.dest(layout.destPath));
});

gulp.task('js', ['lint', 'clean'], function () {
    // Discovers all AMD dependencies, concatenates together all required .js files, minifies them
    rjs(layout.requireJsOptimizerConfig)
        .pipe(uglify({
            preserveComments: 'some'
        }))
        .pipe(gulp.dest(layout.destPath));
});

gulp.task('css', ['clean'], function () {
    return gulp.src(layout.cssSources)
        .pipe(minifyCSS())
        .pipe(concat('styles.css'))
        .pipe(gulp.dest(layout.destPath));
});

/** Copies semantic fonts where the css expects them to be**/
gulp.task('fonts', ['clean'], function () {
    var semantic_fonts = 'src/fonts';
    return gulp.src([
        semantic_fonts + '/icons.svg',
        semantic_fonts + '/icons.ttf',
        semantic_fonts + '/icons.woff'
    ])
        .pipe(gulp.dest(layout.destPath + '../fonts/'));
});

gulp.task('lint', function () {
    gulp.src(layout.lintSources)
        .pipe(jshint())
        .pipe(jshint.reporter('default'));
});

// Removes all files from ./dist/ (w/o using streams)
// you can negate patterns
gulp.task('clean', function (callback) {
    del([layout.destPath], callback);
});
/* End Gulp Tasks */
